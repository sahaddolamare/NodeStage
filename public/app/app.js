angular.module("stage",["ngResource","ngRoute","ui.gravatar","ngAnimate"]),angular.module("stage").config(["$routeProvider","$locationProvider",function(e,t){var r={admin:{auth:["stAuthSvc",function(e){return e.authorizeCurrentUserForRoute("admin")}]},user:{auth:["stAuthSvc",function(e){return e.authorizeAuthenticatedUserForRoute()}]},guest:{auth:["stAuthSvc",function(e){return e.unauthenticatedUser()}]}};t.html5Mode(!0),e.when("/",{templateUrl:"/partials/main/main",controller:"stMainCtrl"}).when("/admin",{templateUrl:"/partials/admin/views/admin",controller:"stAdminCtrl",resolve:r.admin}).when("/admin/ddb",{templateUrl:"/partials/admin/views/dev-dashboard",controller:"stDevDbCtrl",resolve:r.admin}).when("/admin/users/add",{templateUrl:"/partials/admin/views/add-user",controller:"stAdminCtrl",resolve:r.admin}).when("/admin/users/delete",{templateUrl:"/partials/admin/views/delete-user",controller:"stAdminCtrl",resolve:r.admin}).when("/admin/users/purge",{templateUrl:"/partials/admin/views/purge-users",controller:"stAdminCtrl",resolve:r.admin}).when("/admin/users/sync",{templateUrl:"/partials/admin/views/sync-users",controller:"stAdminCtrl",resolve:r.admin}).when("/login",{templateUrl:"/partials/account/views/login",controller:"stLoginCtrl",resolve:r.guest}).when("/signup",{templateUrl:"/partials/account/views/signup",controller:"stSignupCtrl",resolve:r.guest}).when("/settings",{templateUrl:"/partials/account/views/settings",controller:"stProfileCtrl",resolve:r.user}).otherwise({redirectTo:"/"})}]),angular.module("stage").run(["$rootScope","$location",function(e,t){e.$on("$routeChangeError",function(e,r,n,o){"not authorized"===o&&t.path("/")})}]),angular.module("stage").factory("stAuthSvc",["$http","$q","stIdentitySvc","stUserSvc",function(e,t,r,n){return{authenticateUser:function(o,s){var a=t.defer();return e.post("/login",{username:o,password:s}).then(function(e){if(e.data.success){var t=new n;delete e.data.user.hashed_pwd,delete e.data.user.salt,angular.extend(t,e.data.user),r.currentUser=t,a.resolve(!0)}else a.resolve(!1)}),a.promise},createUser:function(e){var r=new n(e),o=t.defer();return r.$save().then(function(){o.resolve()},function(e){o.reject(e.data.reason)}),o.promise},logoutUser:function(){var n=t.defer();return e.post("/logout",{logout:!0}).then(function(){r.currentUser=void 0,n.resolve()}),n.promise},purgeUsers:function(){var r=t.defer();return e({method:"PURGE",url:"/api/users"}).then(function(){console.log("User database has been purged"),r.resolve()}),r.promise},syncUsers:function(r){var n=t.defer();return e({method:"COPY",url:"/api/db",headers:{"Content-Type":"application/json"},data:{collection:"users",direction:r}}).then(function(){console.log("User database has been synced"),n.resolve()}),n.promise},updateCurrentUser:function(e){var n=t.defer(),o=angular.copy(r.currentUser);return angular.extend(o,e),o.$update().then(function(){r.currentUser=o,n.resolve()},function(e){n.reject(e.data.reason)}),n.promise},authorizeAuthenticatedUserForRoute:function(){return r.isAuthenticated()?!0:t.reject("not authorized")},authorizeCurrentUserForRoute:function(e){return r.isAuthorized(e)?!0:t.reject("not authorized")},unauthenticatedUser:function(){return r.isAuthenticated()?t.reject("user signed in"):!0}}}]),angular.module("stage").factory("stIdentitySvc",["$window","stUserSvc",function(e,t){var r;return e.stageUser&&(r=new t,delete e.stageUser.hashed_pwd,delete e.stageUser.salt,angular.extend(r,e.stageUser)),{currentUser:r,isAuthenticated:function(){return!!this.currentUser},isAuthorized:function(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}}}]),angular.module("stage").controller("stLoginCtrl",["$scope","$location","stAuthSvc","stIdentitySvc","stTickerSvc",function(e,t,r,n,o){e.identity=n,e.signin=function(s,a){return!s||!a||s.$invalid||a.$invalid?(s&&!s.$invalid||$(loginWidget.username).addClass("invalid"),a&&!a.$invalid||$(loginWidget.password).addClass("invalid"),o.error("Please enter a valid email address and password."),!1):void r.authenticateUser(s,a).then(function(r){if(r){s="",a="",e.username="",e.password="";var u=n.isAuthorized("admin")?"/admin":"/";o.notify("You have been successfully authenticated."),t.path("login")&&t.path(u),n.isAuthorized("admin")&&t.path(u)}else o.error("Invalid email address or password was given.")})},e.signout=function(){r.logoutUser().then(function(){e.username="",e.password="",o.notify("You have been signed out."),t.path("/")})}}]),angular.module("stage").directive("stLoginWidget",function(){return{restrict:"E",replace:!0,templateUrl:"/partials/account/views/login-widget"}}),angular.module("stage").controller("stProfileCtrl",["$scope","stAuthSvc","stIdentitySvc","stTickerSvc",function(e,t,r,n){e.email=r.currentUser.userName,e.firstName=r.currentUser.firstName,e.lastName=r.currentUser.lastName,e.update=function(){var r={userName:e.email,firstName:e.firstName,lastName:e.lastName};e.password&&e.password.length>0&&(r.password=e.password),t.updateCurrentUser(r).then(function(){n.notify("Your profile has been updated.")},function(e){n.error(e)})}}]),angular.module("stage").factory("stUserSvc",["$resource",function(e){var t=e("/api/users/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1},purge:{method:"PURGE",isArray:!1}});return t.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},t}]),angular.module("stage").controller("stAdminCtrl",["$scope","$timeout","stAdminSvc","stAdminUserSvc","stAuthSvc","stTickerSvc",function(e,t,r,n,o,s){e.env=r.whatEnv(),e.users=n.populateUsers(),e.userRes=e.users,e.userField="userName",e.userReverse=!1,e.userCurrentPage=0,e.userShowOnPage="10",e.userSyncEnabled="development"==e.env,e.userSyncDir="toloc",e.filterUsers=function(){e.userRes=[];var t=n.searchUsers(e.users,e.userSearch);e.userRes=t,e.userCurrentPage=0},e.sortUsers=function(t,r){e.userReverse=e.userField===t?!e.userReverse:!1,r&&(e.userReverse=e.userField===t?e.userReverse:!0),e.userField=t},e.createUser=function(){var t={userName:e.email,password:e.password,firstName:e.firstName,lastName:e.lastName};o.createUser(t).then(function(){s.notify("Created user account "+t.userName+"."),r.adminRedirect("/admin")},function(e){s.error(e)})},e.purgeUsers=function(){r.adminRedirect("/admin"),r.updateRoot("userPurgeInProgress",!0),t(function(){o.purgeUsers().then(function(){r.adminRedirect("/"),o.logoutUser().then(function(){t(e.purgeDone,5e3)},function(e){s.error(e),r.updateRoot("userPurgeInProgress",!1)})},function(r){s.error(r),t(e.purgeDone,5e3)})},5e3)},e.syncDb=function(n,a){"users"==n&&(r.adminRedirect("/admin"),r.updateRoot("userSyncInProgress",!0),o.syncUsers(a).then(function(){"toloc"==a?(r.adminRedirect("/"),o.logoutUser().then(function(){t(e.syncDone,5e3)},function(e){s.error(e),r.updateRoot("userSyncInProgress",!0)})):t(e.syncDone,5e3)},function(r){s.error(r),t(e.syncDone,5e3)}))},e.pageUsers=function(){return Math.ceil(e.userRes.length/e.userShowOnPage)},e.purgeDone=function(){s.notify("User database has been purged."),r.updateRoot("userPurgeInProgress",!1)},e.syncDone=function(){s.notify("User database has been synced."),r.updateRoot("userSyncInProgress",!0)}}]),angular.module("stage").factory("stAdminSvc",["$location","$parse","$rootScope","$window",function(e,t,r,n){return{adminRedirect:function(t){e.path(t)},updateRoot:function(e,r){var n=t("$rootScope."+e);n=r},whatEnv:function(){return n.env}}}]),angular.module("stage").factory("stAdminUserSvc",["$filter","stUserSvc",function(e,t){return{actionDone:function(e){switch(e){case"purge":var t="purged";$rootScope.userPurgeInProgress=!1;break;case"sync":var t="synced";$rootScope.userSyncInProgress=!1}t&&stTickerSvc.notify("User database has been "+t+".")},populateUsers:function(){return t.query()},searchUsers:function(t,r){return e("userfind")(t,r)}}}]),angular.module("stage").controller("stDevDbCtrl",["$scope","$http","$timeout",function(e,t,r){e.ddbView=null,e.ddbConsoleType=null,e.localMongoStatus=!1,e.remoteMongoStatus=!1,e.azureStreamStatus=!1,e.ddbStreamWell="",e.ddbChangeView=function(t){switch(t){case"overview":e.ddbView=null,e.ddbConsoleType=null;break;case"localMongo":e.ddbView=t,e.ddbConsoleType="cmd",e.ddbStreamWell="Connected to local MongoDB service\n",e.localMongoStatus||e.ddbConnect(t),e.ddbStream(t);break;case"remoteMongo":e.ddbView=t,e.ddbConsoleType="cmd",e.ddbStreamWell="Connected to cloud MongoDB service\n",e.remoteMongoStatus||e.ddbConnect(t),e.ddbStream(t);break;case"azureStream":e.ddbView=t,e.ddbConsoleType="view",e.ddbStreamWell="Connected to Azure log streaming service\n",e.azureStreamStatus||e.ddbConnect(t),e.ddbStream(t)}},e.ddbCommand=function(){var r=e.ddbView;if(console.log(r),"cmd"!==e.ddbConsoleType)return!1;console.log("Type is cmd"),console.log(e.ddbCmdBar),console.log(e.ddbIsConnected(r));var n=!1;switch(r){case"localMongo":n=e.localMongoStatus;break;case"remoteMongo":n=e.remoteMongoStatus}return n&&e.ddbCmdBar?void t.post("/api/devdash/"+r+"/command",{cmd:e.ddbCmdBar}).then(function(t){e.ddbCmdBar=""}):!1},e.ddbConnect=function(r){t.get("/api/devdash/"+r+"/connect",{check:!0}).then(function(){"localMongo"==r?e.localMongoStatus=!0:"remoteMongo"==r?e.remoteMongoStatus=!0:"azureStream"==r&&(e.azureStreamStatus=!0)})},e.ddbDisconnect=function(t){"localMongo"==t?e.localMongoStatus=!1:"remoteMongo"==t?e.remoteMongoStatus=!1:"azureStream"==t&&(e.azureStreamStatus=!1)},e.ddbIsConnected=function(r){t.get("/api/devdash/"+r+"/status",{check:!0}).then(function(t){return"localMongo"==r?"Connected"==t.data&&200==t.status?(e.localMongoStatus=!0,!0):(e.localMongoStatus=!1,!1):"remoteMongo"==r?"Connected"==t.data&&200==t.status?(e.remoteMongoStatus=!0,!0):(e.remoteMongoStatus=!1,!1):"azureStream"==r?"Connected"==t.data&&200==t.status?(e.azureStreamStatus=!0,!0):(e.azureStreamStatus=!1,!1):void 0})},e.ddbStream=function(t){if("undefined"!=typeof EventSource){var n=new EventSource("/api/devdash/"+t+"/stream");n.addEventListener("message",function(t){e.$apply(function(){var n=JSON.parse(t.data);n=n.replace(/\[0m/g,""),n=n.replace(/\[36m/g,""),e.ddbStreamWell+=n.trim()+"\n",r(function(){var e=document.getElementById("streamWell");e.scrollTop=e.scrollHeight},50)})},!1),n.addEventListener("error",function(r){e.$apply(function(){e.ddbDisconnect(t),e.ddbStreamWell+="The stream for "+t+" has been unexpectedly closed.\n"}),n.close()},!1)}else e.ddbStreamWell="This browser does not support streaming.\n"}}]),angular.module("stage").factory("stDevDbSvc",["$http","$q","$rootScope",function(e,t,r){return{}}]),angular.module("stage").filter("userStartPage",function(){return function(e,t){return t=+t,e.slice(t)}}),angular.module("stage").filter("userfind",function(){return function(e,t){var r=[];return angular.forEach(e,function(e){try{var n=new RegExp(t,"gi")}catch(o){return[]}(e.userName.match(n)||e.firstName.match(n)||e.lastName.match(n)||""==t)&&r.push({_id:e._id,userName:e.userName,firstName:e.firstName,lastName:e.lastName,roles:e.roles})}),r}}),angular.module("stage").controller("stMainCtrl",["$scope",function(e){}]),angular.module("stage").controller("stTickerCtrl",["$scope","stTickerSvc",function(e,t){e.custom=t.custom(),e.reset=t.reset(),e.showAll=function(){$(".ticker-container").toggleClass("expanded")}}]),angular.module("stage").factory("stTickerSvc",function(){function e(e,r,s){e=r?" "+e:e;var a=$("<span></span>").addClass("ticker-msg").html(e);s&&(s=$("<span></span>").addClass("iconic iconic-sm "+s),a.prepend(s)),r&&a.addClass(r),$("#ticker").addClass("on").prepend(a),setTimeout(function(){$("#ticker").removeClass("on")},300),n?(clearTimeout(o),o=setTimeout(function(){t(),n=!1},8e3)):(n=!0,o=setTimeout(function(){t(),n=!1},8e3))}function t(){$("#ticker #ftrmsg").remove();var e=$("<span></span>").html(r).attr("id","ftrmsg");$("#ticker").addClass("on").prepend(e),setTimeout(function(){$("#ticker").removeClass("on")},300)}var r="//tardigrade/node | Tardigrade Digital &copy; 2016",n=!1,o=null;return{custom:function(t,r,n){return t?void e(t,r,"iconic-"+n):!1},notify:function(t){return t?void e(t,"success","iconic-circle-check"):!1},error:function(t){return t?void e(t,"error","iconic-circle-x"):!1},info:function(t){return t?void e(t,null,"iconic-info"):!1},reset:function(){t()}}});
//# sourceMappingURL=data:application/json;base64,
