angular.module("stage",["ngResource","ngRoute","ui.gravatar","ngAnimate"]),angular.module("stage").config(["$routeProvider","$locationProvider",function(e,r){var t={admin:{auth:["stAuthSvc",function(e){return e.authorizeCurrentUserForRoute("admin")}]},user:{auth:["stAuthSvc",function(e){return e.authorizeAuthenticatedUserForRoute()}]},guest:{auth:["stAuthSvc",function(e){return e.unauthenticatedUser()}]}};r.html5Mode(!0),e.when("/",{templateUrl:"/partials/main/main",controller:"stMainCtrl"}).when("/admin",{templateUrl:"/partials/admin/views/admin",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/ddb",{templateUrl:"/partials/admin/views/dev-dashboard",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/add",{templateUrl:"/partials/admin/views/add-user",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/delete",{templateUrl:"/partials/admin/views/delete-user",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/purge",{templateUrl:"/partials/admin/views/purge-users",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/sync",{templateUrl:"/partials/admin/views/sync-users",controller:"stAdminCtrl",resolve:t.admin}).when("/login",{templateUrl:"/partials/account/views/login",controller:"stLoginCtrl",resolve:t.guest}).when("/signup",{templateUrl:"/partials/account/views/signup",controller:"stSignupCtrl",resolve:t.guest}).when("/settings",{templateUrl:"/partials/account/views/settings",controller:"stProfileCtrl",resolve:t.user}).otherwise({redirectTo:"/"})}]),angular.module("stage").run(["$rootScope","$location",function(e,r){e.$on("$routeChangeError",function(e,t,n,s){"not authorized"===s&&r.path("/")})}]),angular.module("stage").factory("stAuthSvc",["$http","$q","stIdentitySvc","stUserSvc",function(e,r,t,n){return{authenticateUser:function(s,a){var o=r.defer();return e.post("/login",{username:s,password:a}).then(function(e){if(e.data.success){var r=new n;delete e.data.user.hashed_pwd,delete e.data.user.salt,angular.extend(r,e.data.user),t.currentUser=r,o.resolve(!0)}else o.resolve(!1)}),o.promise},createUser:function(e){var t=new n(e),s=r.defer();return t.$save().then(function(){s.resolve()},function(e){s.reject(e.data.reason)}),s.promise},logoutUser:function(){var n=r.defer();return e.post("/logout",{logout:!0}).then(function(){t.currentUser=void 0,n.resolve()}),n.promise},purgeUsers:function(){var t=r.defer();return e({method:"PURGE",url:"/api/users"}).then(function(){console.log("User database has been purged"),t.resolve()}),t.promise},syncUsers:function(t){var n=r.defer();return e({method:"COPY",url:"/api/db",headers:{"Content-Type":"application/json"},data:{collection:"users",direction:t}}).then(function(){console.log("User database has been synced"),n.resolve()}),n.promise},updateCurrentUser:function(e){var n=r.defer(),s=angular.copy(t.currentUser);return angular.extend(s,e),s.$update().then(function(){t.currentUser=s,n.resolve()},function(e){n.reject(e.data.reason)}),n.promise},authorizeAuthenticatedUserForRoute:function(){return t.isAuthenticated()?!0:r.reject("not authorized")},authorizeCurrentUserForRoute:function(e){return t.isAuthorized(e)?!0:r.reject("not authorized")},unauthenticatedUser:function(){return t.isAuthenticated()?r.reject("user signed in"):!0}}}]),angular.module("stage").factory("stIdentitySvc",["$window","stUserSvc",function(e,r){var t;return e.stageUser&&(t=new r,delete e.stageUser.hashed_pwd,delete e.stageUser.salt,angular.extend(t,e.stageUser)),{currentUser:t,isAuthenticated:function(){return!!this.currentUser},isAuthorized:function(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}}}]),angular.module("stage").controller("stLoginCtrl",["$scope","$location","stAuthSvc","stIdentitySvc","stTickerSvc",function(e,r,t,n,s){e.identity=n,e.signin=function(a,o){return!a||!o||a.$invalid||o.$invalid?(a&&!a.$invalid||$(loginWidget.username).addClass("invalid"),o&&!o.$invalid||$(loginWidget.password).addClass("invalid"),s.error("Please enter a valid email address and password."),!1):void t.authenticateUser(a,o).then(function(t){if(t){a="",o="",e.username="",e.password="";var i=n.isAuthorized("admin")?"/admin":"/";s.notify("You have been successfully authenticated."),r.path("login")&&r.path(i),n.isAuthorized("admin")&&r.path(i)}else s.error("Invalid email address or password was given.")})},e.signout=function(){t.logoutUser().then(function(){e.username="",e.password="",s.notify("You have been signed out."),r.path("/")})}}]),angular.module("stage").directive("stLoginWidget",function(){return{restrict:"E",replace:!0,templateUrl:"/partials/account/views/login-widget"}}),angular.module("stage").controller("stProfileCtrl",["$scope","stAuthSvc","stIdentitySvc","stTickerSvc",function(e,r,t,n){e.email=t.currentUser.userName,e.firstName=t.currentUser.firstName,e.lastName=t.currentUser.lastName,e.update=function(){var t={userName:e.email,firstName:e.firstName,lastName:e.lastName};e.password&&e.password.length>0&&(t.password=e.password),r.updateCurrentUser(t).then(function(){n.notify("Your profile has been updated.")},function(e){n.error(e)})}}]),angular.module("stage").factory("stUserSvc",["$resource",function(e){var r=e("/api/users/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1},purge:{method:"PURGE",isArray:!1}});return r.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},r}]),angular.module("stage").controller("stAdminCtrl",["$scope","$timeout","stAdminSvc","stAdminUserSvc","stAuthSvc","stTickerSvc",function(e,r,t,n,s,a){e.env=t.whatEnv(),e.users=n.populateUsers(),e.userRes=e.users,e.userField="userName",e.userReverse=!1,e.userCurrentPage=0,e.userShowOnPage="10",e.userSyncEnabled="development"==e.env,e.userSyncDir="toloc",e.filterUsers=function(){e.userRes=[];var r=n.searchUsers(e.users,e.userSearch);e.userRes=r,e.userCurrentPage=0},e.sortUsers=function(r,t){e.userReverse=e.userField===r?!e.userReverse:!1,t&&(e.userReverse=e.userField===r?e.userReverse:!0),e.userField=r},e.createUser=function(){var r={userName:e.email,password:e.password,firstName:e.firstName,lastName:e.lastName};s.createUser(r).then(function(){a.notify("Created user account "+r.userName+"."),t.adminRedirect("/admin")},function(e){a.error(e)})},e.purgeUsers=function(){t.adminRedirect("/admin"),t.updateRoot("userPurgeInProgress",!0),r(function(){s.purgeUsers().then(function(){t.adminRedirect("/"),s.logoutUser().then(function(){r(e.purgeDone,5e3)},function(e){a.error(e),t.updateRoot("userPurgeInProgress",!1)})},function(t){a.error(t),r(e.purgeDone,5e3)})},5e3)},e.syncDb=function(n,o){"users"==n&&(t.adminRedirect("/admin"),t.updateRoot("userSyncInProgress",!0),s.syncUsers(o).then(function(){"toloc"==o?(t.adminRedirect("/"),s.logoutUser().then(function(){r(e.syncDone,5e3)},function(e){a.error(e),t.updateRoot("userSyncInProgress",!0)})):r(e.syncDone,5e3)},function(t){a.error(t),r(e.syncDone,5e3)}))},e.pageUsers=function(){return Math.ceil(e.userRes.length/e.userShowOnPage)},e.purgeDone=function(){a.notify("User database has been purged."),t.updateRoot("userPurgeInProgress",!1)},e.syncDone=function(){a.notify("User database has been synced."),t.updateRoot("userSyncInProgress",!0)}}]),angular.module("stage").factory("stAdminSvc",["$location","$parse","$rootScope","$window",function(e,r,t,n){return{adminRedirect:function(r){e.path(r)},updateRoot:function(e,t){var n=r("$rootScope."+e);n=t},whatEnv:function(){return n.env}}}]),angular.module("stage").factory("stAdminUserSvc",["$filter","stUserSvc",function(e,r){return{actionDone:function(e){switch(e){case"purge":var r="purged";$rootScope.userPurgeInProgress=!1;break;case"sync":var r="synced";$rootScope.userSyncInProgress=!1}r&&stTickerSvc.notify("User database has been "+r+".")},populateUsers:function(){return r.query()},searchUsers:function(r,t){return e("userfind")(r,t)}}}]),angular.module("stage").filter("userStartPage",function(){return function(e,r){return r=+r,e.slice(r)}}),angular.module("stage").filter("userfind",function(){return function(e,r){var t=[];return angular.forEach(e,function(e){try{var n=new RegExp(r,"gi")}catch(s){return[]}(e.userName.match(n)||e.firstName.match(n)||e.lastName.match(n)||""==r)&&t.push({_id:e._id,userName:e.userName,firstName:e.firstName,lastName:e.lastName,roles:e.roles})}),t}}),angular.module("stage").controller("stMainCtrl",["$scope",function(e){}]),angular.module("stage").controller("stTickerCtrl",["$scope","stTickerSvc",function(e,r){e.custom=r.custom(),e.reset=r.reset(),e.showAll=function(){$(".ticker-container").toggleClass("expanded")}}]),angular.module("stage").factory("stTickerSvc",function(){function e(e,t,a){e=t?" "+e:e;var o=$("<span></span>").addClass("ticker-msg").html(e);a&&(a=$("<span></span>").addClass("iconic iconic-sm "+a),o.prepend(a)),t&&o.addClass(t),$("#ticker").addClass("on").prepend(o),setTimeout(function(){$("#ticker").removeClass("on")},300),n?(clearTimeout(s),s=setTimeout(function(){r(),n=!1},8e3)):(n=!0,s=setTimeout(function(){r(),n=!1},8e3))}function r(){$("#ticker #ftrmsg").remove();var e=$("<span></span>").html(t).attr("id","ftrmsg");$("#ticker").addClass("on").prepend(e),setTimeout(function(){$("#ticker").removeClass("on")},300)}var t="//tardigrade/node | Tardigrade Digital &copy; 2016",n=!1,s=null;return{custom:function(r,t,n){return r?void e(r,t,"iconic-"+n):!1},notify:function(r){return r?void e(r,"success","iconic-circle-check"):!1},error:function(r){return r?void e(r,"error","iconic-circle-x"):!1},info:function(r){return r?void e(r,null,"iconic-info"):!1},reset:function(){r()}}});
//# sourceMappingURL=data:application/json;base64,
