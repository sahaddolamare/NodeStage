angular.module("stage",["ngResource","ngRoute","ui.gravatar","ngAnimate"]),angular.module("stage").config(["$routeProvider","$locationProvider",function(e,r){var t={admin:{auth:["stAuth",function(e){return e.authorizeCurrentUserForRoute("admin")}]},user:{auth:["stAuth",function(e){return e.authorizeAuthenticatedUserForRoute()}]},guest:{auth:["stAuth",function(e){return e.unauthenticatedUser()}]}};r.html5Mode(!0),e.when("/",{templateUrl:"/partials/main/main",controller:"stMainCtrl"}).when("/admin",{templateUrl:"/partials/admin/views/admin",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/add",{templateUrl:"/partials/admin/views/add-user",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/delete",{templateUrl:"/partials/admin/views/delete-user",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/purge",{templateUrl:"/partials/admin/views/purge-users",controller:"stAdminCtrl",resolve:t.admin}).when("/admin/users/sync",{templateUrl:"/partials/admin/views/sync-users",controller:"stAdminCtrl",resolve:t.admin}).when("/login",{templateUrl:"/partials/account/views/login",controller:"stLoginCtrl",resolve:t.guest}).when("/signup",{templateUrl:"/partials/account/views/signup",controller:"stSignupCtrl",resolve:t.guest}).when("/settings",{templateUrl:"/partials/account/views/settings",controller:"stProfileCtrl",resolve:t.user}).otherwise({redirectTo:"/"})}]),angular.module("stage").run(["$rootScope","$location",function(e,r){e.$on("$routeChangeError",function(e,t,n,s){"not authorized"===s&&r.path("/")})}]),angular.module("stage").factory("stAuth",["$http","$q","stIdentity","stUser",function(e,r,t,n){return{authenticateUser:function(s,a){var o=r.defer();return e.post("/login",{username:s,password:a}).then(function(e){if(e.data.success){var r=new n;delete e.data.user.hashed_pwd,delete e.data.user.salt,angular.extend(r,e.data.user),t.currentUser=r,o.resolve(!0)}else o.resolve(!1)}),o.promise},createUser:function(e){var t=new n(e),s=r.defer();return t.$save().then(function(){s.resolve()},function(e){s.reject(e.data.reason)}),s.promise},logoutUser:function(){var n=r.defer();return e.post("/logout",{logout:!0}).then(function(){t.currentUser=void 0,n.resolve()}),n.promise},purgeUsers:function(){var t=r.defer();return e({method:"PURGE",url:"/api/users"}).then(function(){console.log("User database has been purged"),t.resolve()}),t.promise},syncUsers:function(t){var n=r.defer();return e({method:"COPY",url:"/api/db",headers:{"Content-Type":"application/json"},data:{collection:"users",direction:t}}).then(function(){console.log("User database has been synced"),n.resolve()}),n.promise},updateCurrentUser:function(e){var n=r.defer(),s=angular.copy(t.currentUser);return angular.extend(s,e),s.$update().then(function(){t.currentUser=s,n.resolve()},function(e){n.reject(e.data.reason)}),n.promise},authorizeAuthenticatedUserForRoute:function(){return t.isAuthenticated()?!0:r.reject("not authorized")},authorizeCurrentUserForRoute:function(e){return t.isAuthorized(e)?!0:r.reject("not authorized")},unauthenticatedUser:function(){return t.isAuthenticated()?r.reject("user signed in"):!0}}}]),angular.module("stage").factory("stIdentity",["$window","stUser",function(e,r){var t;return e.stageUser&&(t=new r,delete e.stageUser.hashed_pwd,delete e.stageUser.salt,angular.extend(t,e.stageUser)),{currentUser:t,isAuthenticated:function(){return!!this.currentUser},isAuthorized:function(e){return!!this.currentUser&&this.currentUser.roles.indexOf(e)>-1}}}]),angular.module("stage").controller("stLoginCtrl",["$scope","stIdentity","stTickerSvc","stAuth","$location",function(e,r,t,n,s){e.identity=r,e.signin=function(a,o){return!a||!o||a.$invalid||o.$invalid?(a&&!a.$invalid||$(loginWidget.username).addClass("invalid"),o&&!o.$invalid||$(loginWidget.password).addClass("invalid"),t.error("Please enter a valid email address and password."),!1):void n.authenticateUser(a,o).then(function(n){if(n){a="",o="",e.username="",e.password="";var i=r.isAuthorized("admin")?"/admin":"/";t.notify("You have been successfully authenticated."),s.path("login")&&s.path(i),r.isAuthorized("admin")&&s.path(i)}else t.error("Invalid email address or password was given.")})},e.signout=function(){n.logoutUser().then(function(){e.username="",e.password="",t.notify("You have been signed out."),s.path("/")})}}]),angular.module("stage").directive("stLoginWidget",function(){return{restrict:"E",replace:!0,templateUrl:"/partials/account/views/login-widget"}}),angular.module("stage").controller("stProfileCtrl",["$scope","stAuth","stIdentity","stTickerSvc",function(e,r,t,n){e.email=t.currentUser.userName,e.fname=t.currentUser.firstName,e.lname=t.currentUser.lastName,e.update=function(){var t={userName:e.email,firstName:e.fname,lastName:e.lname};e.password&&e.password.length>0&&(t.password=e.password),r.updateCurrentUser(t).then(function(){n.notify("Your profile has been updated.")},function(e){n.error(e)})}}]),angular.module("stage").factory("stUser",["$resource",function(e){var r=e("/api/users/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1},purge:{method:"PURGE",isArray:!1}});return r.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},r}]),angular.module("stage").factory(function(){}),angular.module("stage").controller("stAdminCtrl",["$scope","$filter","$location","$timeout","$rootScope","stAuth","stTickerSvc","stUser",function(e,r,t,n,s,a,o,i){e.users=i.query(),e.userRes=e.users,e.userField="userName",e.userReverse=!1,e.userCurrentPage=0,e.userShowOnPage="10",e.userSyncEnabled="development"==window.env,e.userSyncDir="toloc",e.filterUsers=function(){e.userRes=[];var t=r("userfind")(e.users,e.userSearch);e.userRes=t,e.userCurrentPage=0},e.sortUsers=function(r,t){e.userReverse=e.userField===r?!e.userReverse:!1,t&&(e.userReverse=e.userField===r?e.userReverse:!0),e.userField=r},e.createUser=function(){var r={userName:e.email,password:e.password,firstName:e.firstName,lastName:e.lastName};a.createUser(r).then(function(){o.notify("Created user account "+r.userName+"."),t.path("/admin")},function(e){o.error(e)})},e.purgeUsers=function(){t.path("/admin"),s.userPurgeInProgress=!0,n(function(){a.purgeUsers().then(function(){t.path("/"),a.logoutUser().then(function(){n(e.purgeDone,5e3)},function(e){o.error(e),s.userPurgeInProgress=!1})},function(r){o.error(r),n(e.purgeDone,5e3)})},5e3)},e.syncDb=function(r,i){"users"==r&&(t.path("/admin"),s.userSyncInProgress=!0,a.syncUsers(i).then(function(){"toloc"==i?(t.path("/"),a.logoutUser().then(function(){n(e.syncDone,5e3)},function(e){o.error(e),s.userSyncInProgress=!1})):n(e.syncDone,5e3)},function(r){o.error(r),n(e.syncDone,5e3)}))},e.pageUsers=function(){return Math.ceil(e.userRes.length/e.userShowOnPage)},e.purgeDone=function(){o.notify("User database has been purged."),s.userPurgeInProgress=!1},e.syncDone=function(){o.notify("User database has been synced."),s.userSyncInProgress=!1}}]),angular.module("stage").filter("userStartPage",function(){return function(e,r){return r=+r,e.slice(r)}}),angular.module("stage").filter("userfind",function(){return function(e,r){var t=[];return angular.forEach(e,function(e){try{var n=new RegExp(r,"gi")}catch(s){return[]}(e.userName.match(n)||e.firstName.match(n)||e.lastName.match(n)||""==r)&&t.push({_id:e._id,userName:e.userName,firstName:e.firstName,lastName:e.lastName,roles:e.roles})}),t}}),angular.module("stage").controller("stMainCtrl",["$scope",function(e){}]),angular.module("stage").controller("stTickerCtrl",["$scope","stTickerSvc",function(e,r){e.custom=r.custom(),e.reset=r.reset(),e.showAll=function(){$(".ticker-container").toggleClass("expanded")}}]),angular.module("stage").factory("stTickerSvc",function(){function e(e,t,a){e=t?" "+e:e;var o=$("<span></span>").addClass("ticker-msg").html(e);a&&(a=$("<span></span>").addClass("iconic iconic-sm "+a),o.prepend(a)),t&&o.addClass(t),$("#ticker").addClass("on").prepend(o),setTimeout(function(){$("#ticker").removeClass("on")},300),n?(clearTimeout(s),s=setTimeout(function(){r(),n=!1},8e3)):(n=!0,s=setTimeout(function(){r(),n=!1},8e3))}function r(){$("#ticker #ftrmsg").remove();var e=$("<span></span>").html(t).attr("id","ftrmsg");$("#ticker").addClass("on").prepend(e),setTimeout(function(){$("#ticker").removeClass("on")},300)}var t="//tardigrade/node | Tardigrade Digital &copy; 2016",n=!1,s=null;return{custom:function(r,t,n){return r?void e(r,t,"iconic-"+n):!1},notify:function(r){return r?void e(r,"success","iconic-circle-check"):!1},error:function(r){return r?void e(r,"error","iconic-circle-x"):!1},info:function(r){return r?void e(r,null,"iconic-info"):!1},reset:function(){r()}}});
//# sourceMappingURL=data:application/json;base64,
